#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>
#include <stdio.h>

#include "io.h"
#include "init.h"
#include "communication.h"


volatile uint8_t RaceStart = 0; //race off

volatile uint8_t TsalCounter=0;
volatile uint8_t TsalGapCounter=0;
#define BURST 7 //1 BURST~=103us
#define GAP 7	//1 GAP~=103us
#define BURST_L 3 //1 BURST_L=(BURST+GAP)*103us
#define GAP_L 3
ISR(TIMER1_COMPA_vect){
	if(RaceStart){
		if(TsalGapCounter<BURST_L){//no gap
			//LED5_ON;
			//........................600us tsal is set, 600us tsal is down
			if(TsalCounter<BURST){
				TSAL_ON;
				//LED4_ON;
				TsalCounter++;
			}else if(TsalCounter<BURST+GAP){
				TSAL_OFF;
				//LED4_OFF;
				TsalCounter++;
				if(TsalCounter>=BURST+GAP){
					TsalCounter=0;
					TsalGapCounter++;
					if(TsalGapCounter>=BURST_L+GAP_L){
						TsalGapCounter=0;
					}
				}
			}
			//........................600us tsal is set, 600us tsal is down
		}
		else if(TsalGapCounter<BURST_L+GAP_L){//gap
			//LED5_OFF;
			TSAL_OFF;
			if(TsalCounter<BURST){
				TsalCounter++;
			}else if(TsalCounter<BURST+GAP){
				TsalCounter++;
				if(TsalCounter>=BURST+GAP){
					TsalGapCounter++;
					TsalCounter=0;
					if(TsalGapCounter>=BURST_L+GAP_L){
						TsalGapCounter=0;
					}
				}
			}
		}
	}
	else{
		TSAL_OFF;
	}
}

ISR(INT0_vect){
	_delay_us(10); //wait to be sure
	if(bit_is_set(PIN_TSOP, TSOP)){ 	//TSAL----||----TSOP
		;//LED1_ON;
		//LED2_OFF;
	}
	else{ 								//TSAL -------- TSOP
		;//LED2_ON;
		//LED1_OFF;
	}
}

volatile uint8_t ovf=0;
volatile uint8_t ADC_level=0;
#define ADC_min 135
#define ADC_max 172
ISR(TIMER2_OVF_vect){
	if( ovf < (ADC_level-ADC_min+4) ) { //getting result from 4 to 42;
		LED_BATT_GR_OFF;
		LED_BATT_RED_OFF;
	}
	else {
		if(ovf >= 4){
			LED_BATT_GR_ON;
		}
		else{
			LED_BATT_GR_OFF;
			LED_BATT_RED_ON;
		}
		ovf=0;
	}
	ovf++;
}

volatile uint8_t SensorID;
int main() {

	init_IO();
	//init_TSAL();
	//init_TSOP();
	init_batteries();
	init_SPI();

	_delay_ms(20);
	ADC_level=check_ADC();
	SensorID=0;
	sei();

	while(1){

		if(RaceStart==0){
			if(bit_is_clear(PIN_SWITCH, SWITCH_OK)){
				_delay_ms(75);
				LED1_ON;
				LED2_ON;
				LED3_ON;
				LED4_ON;
				LED5_ON;
				_delay_ms(75);
				LED1_OFF;
				LED2_OFF;
				LED3_OFF;
				LED4_OFF;
				LED5_OFF;

				uint8_t wait=1;
				while(wait){
					if(bit_is_clear(PIN_SWITCH, SWITCH_UP)){
						_delay_ms(75);
						SensorID++;
						if(SensorID>5){
							SensorID=1;
						}
						showID(SensorID);
					}
					if(bit_is_clear(PIN_SWITCH, SWITCH_DOWN)){
						_delay_ms(75);
						SensorID--;
						if(SensorID==255){
							SensorID=5;
						}
						showID(SensorID);
					}
					if(bit_is_clear(PIN_SWITCH, SWITCH_OK)){
						_delay_ms(75);
						wait=0;
					}
				}
			}

		}
		//.............................SPI

		/*while(!(SPSR & (1<<SPIF)));
		switch(SPDR){
		case 1:
			RaceStart=1;//race on
			SPDR=5;
			break;
		case 2:
			RaceStart=0;//race off
			SPDR = 4;
			break;
		default:
			SPDR=3;
			break;
		}*/
		//..............................SPI

	}
}
