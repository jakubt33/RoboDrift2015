/*
 * init.c
 *
 *  Created on: 17 mar 2015
 *      Author: Kuba
 */

#include "io.h"
#include <avr/io.h>
#include <avr/delay.h>

void init_RFM69(){
	spi_send(0x80E7); //EL,EF,868band,12.0pF
	writeCmd(0x8299); //er,!ebb,ET,ES,EX,!eb,!ew,DC (bug was here)
	writeCmd(0xA640); //freq select
	writeCmd(0xC647); //4.8kbps
	writeCmd(0x94A0); //VDI,FAST,134kHz,0dBm,-103dBm
	writeCmd(0xC2AC); //AL,!ml,DIG,DQD4
	writeCmd(0xCA81); //FIFO8,SYNC,!ff,DR (FIFO level = 8)
	writeCmd(0xCED4); //SYNC=2DD4;
	writeCmd(0xC483); //@PWR,NO RSTRIC,!st,!fi,OE,EN
	writeCmd(0x9850); //!mp,90kHz,MAX OUT
	writeCmd(0xCC17); //!OB1,!OB0, LPX,!ddy,DDIT,BW0
	writeCmd(0xE000); //NOT USED
	writeCmd(0xC800); //NOT USED
	writeCmd(0xC040); //1.66MHz,2.2V
}
void init_SPI_master(){
	DDR_SPI |= (1 << SCK)|(1 << SS)|(1 << MOSI); // wyjcie na tych pinach
	SPCR = ( 1 << SPE ) | ( 1 << MSTR ) | ( 1 << SPR0 ); //spi enable, atmega = master, Prescaler 16
	SPCR |= (1 << SPIE); //spi interrupt enable
}

void init_SPI_slave(){
	DDR_SPI |= (1<<MISO);
	DDR_SPI &= ~(1 << SS);
	DDR_SPI &= ~(1 << SCK);
	DDR_SPI &= ~(1 << MOSI);
	SPCR = (1 << SPIE)|(1 << SPE); //spi interrupt enable
}

void init_LED() {
	DDR_LED_Y |= (1 << LED1Y);
	DDR_LED_Y |= (1 << LED2Y);
	DDR_LED_Y |= (1 << LED3Y);
	DDR_LED_Y |= (1 << LED4Y);
	DDR_LED_Y |= (1 << LED5Y);

	DDR_LED_S124 |= (1 << LED1S);
	DDR_LED_S124 |= (1 << LED2S);
	DDR_LED_S35 |= (1 << LED3S);
	DDR_LED_S124 |= (1 << LED4S);
	DDR_LED_S35 |= (1 << LED5S);

	DDR_LED_FALSTART |= (1 << LED_FALSTART);
	DDR_LED_GO |= (1 << LED_GO);

	DDR_LED_RED |= (1 << LED_RED);

	LED_GO_OFF;
	LED_FALSTART_OFF;

}

void init_USART( unsigned char ubrr){
    // Ustawienie prêdkoœci transmisji
    UBRRH = (uint8_t)(ubrr >> 8);
    UBRRL = (uint8_t)ubrr;

    // W³¹czenie odbiornika i nadajnika
    UCSRB |= (1 << RXEN) | (1 << TXEN);
    UCSRB |= (1 << RXCIE); //interrupt na receive

    // Ustawienie formatu ramki: 8 bitów danych, 2 bit stopu
    UCSRC = (1 << URSEL) | (1 << USBS) | (3<<UCSZ0);
}
