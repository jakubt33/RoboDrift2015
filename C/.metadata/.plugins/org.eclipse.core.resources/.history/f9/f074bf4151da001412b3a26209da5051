/*
 * init.c
 *
 *  Created on: 17 mar 2015
 *      Author: Kuba
 */

#include "io.h"
#include <avr/io.h>
#include <avr/delay.h>
#include "RFM69.h"
#include "RFM69registers.h"

void init_SPI_master(){
	DDR_SPI |= (1 << SCK)|(1 << SS)|(1 << MOSI); // wyjcie na tych pinach
	SPCR = ( 1 << SPE ) | ( 1 << MSTR ) | ( 1 << SPR0 ); //spi enable, atmega = master, Prescaler 16
	//SPCR |= (1 << SPIE); //spi interrupt enable
}

uint8_t init_RFM69(){

	MyAddress = 50; //no trivial number
	const uint8_t CONFIG[][2] =
	  {
	    /* 0x01 */ { REG_OPMODE, RF_OPMODE_SEQUENCER_ON | RF_OPMODE_LISTEN_OFF | RF_OPMODE_STANDBY },
	    /* 0x02 */ { REG_DATAMODUL, RF_DATAMODUL_DATAMODE_PACKET | RF_DATAMODUL_MODULATIONTYPE_FSK | RF_DATAMODUL_MODULATIONSHAPING_00 }, // no shaping
	    /* 0x03 */ { REG_BITRATEMSB, RF_BITRATEMSB_55555}, // default: 4.8 KBPS
	    /* 0x04 */ { REG_BITRATELSB, RF_BITRATELSB_55555},
	    /* 0x05 */ { REG_FDEVMSB, RF_FDEVMSB_50000}, // default: 5KHz, (FDEV + BitRate / 2 <= 500KHz)
	    /* 0x06 */ { REG_FDEVLSB, RF_FDEVLSB_50000},

	    /* 0x07 */ { REG_FRFMSB, (uint8_t) (RF_FRFMSB_433) },
	    /* 0x08 */ { REG_FRFMID, (uint8_t) (RF_FRFMID_433) },
	    /* 0x09 */ { REG_FRFLSB, (uint8_t) (RF_FRFLSB_433) },

	    // looks like PA1 and PA2 are not implemented on RFM69W, hence the max output power is 13dBm
	    // +17dBm and +20dBm are possible on RFM69HW
	    // +13dBm formula: Pout = -18 + OutputPower (with PA0 or PA1**)
	    // +17dBm formula: Pout = -14 + OutputPower (with PA1 and PA2)**
	    // +20dBm formula: Pout = -11 + OutputPower (with PA1 and PA2)** and high power PA settings (section 3.3.7 in datasheet)
	    ///* 0x11 */ { REG_PALEVEL, RF_PALEVEL_PA0_ON | RF_PALEVEL_PA1_OFF | RF_PALEVEL_PA2_OFF | RF_PALEVEL_OUTPUTPOWER_11111},
	    ///* 0x13 */ { REG_OCP, RF_OCP_ON | RF_OCP_TRIM_95 }, // over current protection (default is 95mA)

	    // RXBW defaults are { REG_RXBW, RF_RXBW_DCCFREQ_010 | RF_RXBW_MANT_24 | RF_RXBW_EXP_5} (RxBw: 10.4KHz)
	    /* 0x19 */ { REG_RXBW, RF_RXBW_DCCFREQ_010 | RF_RXBW_MANT_16 | RF_RXBW_EXP_2 }, // (BitRate < 2 * RxBw)
	    //for BR-19200: /* 0x19 */ { REG_RXBW, RF_RXBW_DCCFREQ_010 | RF_RXBW_MANT_24 | RF_RXBW_EXP_3 },
	    /* 0x25 */ { REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_01 }, // DIO0 is the only IRQ we're using
	    /* 0x26 */ { REG_DIOMAPPING2, RF_DIOMAPPING2_CLKOUT_OFF }, // DIO5 ClkOut disable for power saving
	    /* 0x28 */ { REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN }, // writing to this bit ensures that the FIFO & status flags are reset
	    /* 0x29 */ { REG_RSSITHRESH, 220 }, // must be set to dBm = (-Sensitivity / 2), default is 0xE4 = 228 so -114dBm
	    ///* 0x2D */ { REG_PREAMBLELSB, RF_PREAMBLESIZE_LSB_VALUE } // default 3 preamble bytes 0xAAAAAA
	    /* 0x2E */ { REG_SYNCCONFIG, RF_SYNC_ON | RF_SYNC_FIFOFILL_AUTO | RF_SYNC_SIZE_2 | RF_SYNC_TOL_0 },
	    /* 0x2F */ { REG_SYNCVALUE1, 0x2D },      // attempt to make this compatible with sync1 byte of RFM12B lib
	    /* 0x30 */ { REG_SYNCVALUE2, NETWORKID }, // NETWORK ID
	    /* 0x37 */ { REG_PACKETCONFIG1, RF_PACKET1_FORMAT_VARIABLE | RF_PACKET1_DCFREE_OFF | RF_PACKET1_CRC_ON | RF_PACKET1_CRCAUTOCLEAR_ON | RF_PACKET1_ADRSFILTERING_OFF },
	    /* 0x38 */ { REG_PAYLOADLENGTH, 66 }, // in variable length mode: the max frame size, not used in TX
	    ///* 0x39 */ { REG_NODEADRS, nodeID }, // turned off because we're not using address filtering
	    /* 0x3C */ { REG_FIFOTHRESH, RF_FIFOTHRESH_TXSTART_FIFONOTEMPTY | RF_FIFOTHRESH_VALUE }, // TX on FIFO not empty
	    /* 0x3D */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_2BITS | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, // RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
	    //for BR-19200: /* 0x3D */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_NONE | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, // RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
	    /* 0x6F */ { REG_TESTDAGC, RF_DAGC_IMPROVED_LOWBETA0 }, // run DAGC continuously in RX mode for Fading Margin Improvement, recommended default for AfcLowBetaOn=0
	    {255, 0}
	  };

	do writeReg(REG_SYNCVALUE1, 0xAA); while (readReg(REG_SYNCVALUE1) != 0xAA);
	do writeReg(REG_SYNCVALUE1, 0x55); while (readReg(REG_SYNCVALUE1) != 0x55);

	  for (uint8_t i = 0; CONFIG[i][0] != 255; i++)
	    writeReg(CONFIG[i][0], CONFIG[i][1]);

	  // Encryption is persistent between resets and can trip you up during debugging.
	  // Disable it during initialization so we always start from a known state.
	  encrypt(0);

	  setHighPower(isRFM69HW); // called regardless if it's a RFM69W or RFM69HW
	  setMode(RF69_MODE_STANDBY);
	  while ((readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00); // wait for ModeReady
	  return true;
}
/*
void init_SPI_slave(){
	DDR_SPI |= (1<<MISO);
	DDR_SPI &= ~(1 << SS);
	DDR_SPI &= ~(1 << SCK);
	DDR_SPI &= ~(1 << MOSI);
	SPCR = (1 << SPIE)|(1 << SPE); //spi interrupt enable
}*/

void init_LED() {
	DDR_LED_Y |= (1 << LED1Y);
	DDR_LED_Y |= (1 << LED2Y);
	DDR_LED_Y |= (1 << LED3Y);
	DDR_LED_Y |= (1 << LED4Y);
	DDR_LED_Y |= (1 << LED5Y);

	DDR_LED_S124 |= (1 << LED1S);
	DDR_LED_S124 |= (1 << LED2S);
	DDR_LED_S35 |= (1 << LED3S);
	DDR_LED_S124 |= (1 << LED4S);
	DDR_LED_S35 |= (1 << LED5S);

	DDR_LED_FALSTART |= (1 << LED_FALSTART);
	DDR_LED_GO |= (1 << LED_GO);

	DDR_LED_RED |= (1 << LED_RED);

	LED_GO_OFF;
	LED_FALSTART_OFF;

}


void init_USART( unsigned char ubrr){
    // Ustawienie prêdkoœci transmisji
    UBRRH = (uint8_t)(ubrr >> 8);
    UBRRL = (uint8_t)ubrr;

    // W³¹czenie odbiornika i nadajnika
    UCSRB |= (1 << RXEN) | (1 << TXEN);
    UCSRB |= (1 << RXCIE); //interrupt na receive

    // Ustawienie formatu ramki: 8 bitów danych, 2 bit stopu
    UCSRC = (1 << URSEL) | (1 << USBS) | (3<<UCSZ0);
}
